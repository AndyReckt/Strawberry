package me.andyreckt.strawberry;

import lombok.Getter;
import me.andyreckt.strawberry.adapter.StrawberryTypeAdapter;
import me.andyreckt.strawberry.adapter.defaults.PrimitiveTypeAdapters;
import org.simpleyaml.configuration.comments.format.YamlCommentFormat;
import org.simpleyaml.configuration.file.YamlFile;

import java.io.File;
import java.io.IOException;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Field;
import java.util.*;

@Getter
@SuppressWarnings({"unchecked", "rawtypes"})
public abstract class Strawberry {

    private final YamlFile yamlFile;

    public static final Map<Class<?>, StrawberryTypeAdapter<?,?>> ADAPTER_MAP = new HashMap<>();

    public Strawberry(String path) {
        this(new File(path));
    }

    public Strawberry(File path) {
        this.yamlFile = new YamlFile(path);
        this.defaultTypeAdapters();
    }

    public void reload() throws IllegalAccessException, IOException {
        yamlFile.createOrLoadWithComments();
        this.load();
        yamlFile.save();
    }

    private void defaultTypeAdapters() {
        ADAPTER_MAP.putIfAbsent(String.class, PrimitiveTypeAdapters.STRING);
        ADAPTER_MAP.putIfAbsent(Integer.class, PrimitiveTypeAdapters.INTEGER);
        ADAPTER_MAP.putIfAbsent(int.class, PrimitiveTypeAdapters.INTEGER);
        ADAPTER_MAP.putIfAbsent(Long.class, PrimitiveTypeAdapters.LONG);
        ADAPTER_MAP.putIfAbsent(long.class, PrimitiveTypeAdapters.LONG);
        ADAPTER_MAP.putIfAbsent(Double.class, PrimitiveTypeAdapters.DOUBLE);
        ADAPTER_MAP.putIfAbsent(double.class, PrimitiveTypeAdapters.DOUBLE);
        ADAPTER_MAP.putIfAbsent(Float.class, PrimitiveTypeAdapters.FLOAT);
        ADAPTER_MAP.putIfAbsent(float.class, PrimitiveTypeAdapters.FLOAT);
        ADAPTER_MAP.putIfAbsent(Boolean.class, PrimitiveTypeAdapters.BOOLEAN);
        ADAPTER_MAP.putIfAbsent(boolean.class, PrimitiveTypeAdapters.BOOLEAN);
        ADAPTER_MAP.putIfAbsent(List.class, PrimitiveTypeAdapters.LIST);
    }

    public static void registerTypeAdapter(Class<?> type, StrawberryTypeAdapter<?, ?> adapter) {
        ADAPTER_MAP.put(type, adapter);
    }

    private void load() throws IllegalAccessException {
        Field[] fields = this.getClass().getDeclaredFields();

        for (Field field : fields) {
            field.setAccessible(true);

            if (!field.isAnnotationPresent(Config.class)) {
                continue;
            }

            Config config = field.getAnnotation(Config.class);
            Class<?> type = field.getType();
            StrawberryTypeAdapter adapter = ADAPTER_MAP.get(type);

            if (adapter == null) {
                throw new IllegalArgumentException("No adapter found for type " + type.getName());
            }

            Object value = yamlFile.get(config.path(), null);
            if (value == null) {
                value = field.get(this);

                yamlFile.set(config.path(), adapter.serialize(value));

                if (!config.comment().isEmpty()) {
                    yamlFile.setComment(config.path(), config.comment(), getCommentFormat());
                }

                continue;
            }

            field.set(this, adapter.deserialize(value));
        }

        if (!header().isEmpty()) {
            yamlFile.setHeader(header());
        }

        if (!footer().isEmpty()) {
            yamlFile.setFooter(footer());
        }
    }

    public String header() {
        return "Generated by Strawberry";
    }

    public String footer() {
        return "";
    }

    public YamlCommentFormat getCommentFormat() {
        return YamlCommentFormat.PRETTY;
    }

    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.FIELD)
    public @interface Config {
        String path();
        String comment() default "";
    }
}